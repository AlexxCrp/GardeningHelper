// <auto-generated />
using System;
using GardeningHelperDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GardeningHelperDatabase.Migrations
{
    [DbContext(typeof(GardeningHelperDbContext))]
    [Migration("20250509142510_AddFieldsToGardenPlant")]
    partial class AddFieldsToGardenPlant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GardeningHelperDatabase.Entities.GardenPlant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DaysToWateringCounter")
                        .HasColumnType("int");

                    b.Property<decimal>("LastRainfallAmount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("LastRainfallDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LastSoilMoisture")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("LastStatusCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastWateredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusChangeReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserGardenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserGardenId");

                    b.ToTable("GardenPlants");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.Identity.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GrowthPeriod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HarvestTime")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<decimal>("MaxHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MaxRainfall")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MaxSoilMoisture")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MaxTemperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MinHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MinRainfall")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MinSoilMoisture")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MinTemperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SoilType")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("SunlightRequirements")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<int>("WateringThresholdDays")
                        .HasColumnType("int");

                    b.Property<decimal>("WateringThresholdRainfall")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.PlantAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TriggerStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.PlantDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BloomSeason")
                        .HasColumnType("int");

                    b.Property<string>("CompanionPlantIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CulinaryUses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysToGermination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysToMaturity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("DiseaseManagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FertilizationSchedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrowingZones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HarvestingTips")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeightAtMaturity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoricalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdealPhLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lifecycle")
                        .HasColumnType("int");

                    b.Property<string>("MedicinalUses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PestManagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("PlantingDepth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropagationMethods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PruningInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purposes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpacingBetweenPlants")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpreadAtMaturity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageTips")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WaterNeeds")
                        .HasColumnType("int");

                    b.Property<string>("WinterCare")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlantId")
                        .IsUnique();

                    b.ToTable("PlantDetails");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.UserGarden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("xSize")
                        .HasColumnType("int");

                    b.Property<int>("ySize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserGardens");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.UserInput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GrowthStage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InputDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<decimal>("SoilMoisture")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInputs");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.UserWeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("General")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Humidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("Rainfall")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWeatherData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.GardenPlant", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Plant", "Plant")
                        .WithMany("GardenPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardeningHelperDatabase.Entities.UserGarden", "UserGarden")
                        .WithMany("GardenPlants")
                        .HasForeignKey("UserGardenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("UserGarden");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardeningHelperDatabase.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.Notification", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Identity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.PlantDetails", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Plant", "Plant")
                        .WithOne("Details")
                        .HasForeignKey("GardeningHelperDatabase.Entities.PlantDetails", "PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.UserGarden", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Identity.User", "User")
                        .WithMany("UserGardens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.UserInput", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Plant", "Plant")
                        .WithMany("UserInputs")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardeningHelperDatabase.Entities.Identity.User", "User")
                        .WithMany("UserInputs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.UserWeatherData", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Identity.User", "User")
                        .WithMany("UserWeatherData")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GardeningHelperDatabase.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.Identity.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("UserGardens");

                    b.Navigation("UserInputs");

                    b.Navigation("UserWeatherData");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.Plant", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("GardenPlants");

                    b.Navigation("UserInputs");
                });

            modelBuilder.Entity("GardeningHelperDatabase.Entities.UserGarden", b =>
                {
                    b.Navigation("GardenPlants");
                });
#pragma warning restore 612, 618
        }
    }
}
